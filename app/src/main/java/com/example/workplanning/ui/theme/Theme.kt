package com.example.workplanning.ui.theme

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color

// üé® M√†u t·ªëi ‚Äì d·ªãu m·∫Øt, n·ªÅn x√°m xanh ƒë·∫≠m, ch·ªØ tr·∫Øng
private val DarkColorScheme = darkColorScheme(
    primary = Color(0xFF81D4FA),        // Xanh d∆∞∆°ng nh·∫°t
    onPrimary = Color.Black,
    secondary = Color(0xFF4DD0E1),      // Xanh ng·ªçc nh·∫°t
    onSecondary = Color.Black,
    background = Color(0xFF121212),     // X√°m r·∫•t ƒë·∫≠m
    onBackground = Color(0xFFF1F1F1),   // Ch·ªØ tr·∫Øng m·ªù
    surface = Color(0xFF1E1E1E),
    onSurface = Color.White,
)

// ‚òÄÔ∏è M√†u s√°ng ‚Äì nh·∫π nh√†ng, n·ªÅn kem, ch·ªØ ƒëen
private val LightColorScheme = lightColorScheme(
    primary = Color(0xFF1976D2),        // Xanh d∆∞∆°ng t∆∞∆°i
    onPrimary = Color.White,
    secondary = Color(0xFF64B5F6),      // Xanh da tr·ªùi
    onSecondary = Color.Black,
    background = Color(0xFFFDFDFD),     // Tr·∫Øng kem
    onBackground = Color(0xFF202124),   // Ch·ªØ x√°m ƒë·∫≠m
    surface = Color.White,
    onSurface = Color.Black,
)

@Composable
fun WorkPlanningTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
//        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
//            val context = LocalContext.current
//            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
//        }
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography, // d√πng typography hi·ªán t·∫°i c·ªßa b·∫°n
        content = content
    )
}
